from __future__ import annotations

import os
from dataclasses import dataclass
from pathlib import Path
from typing import Optional

from dotenv import load_dotenv


# 繝励Ο繧ｸ繧ｧ繧ｯ繝医Ν繝ｼ繝域耳螳夲ｼ医％縺ｮ繝輔ぃ繧､繝ｫ縺九ｉ2髫主ｱ､荳・ config/settings.py -> repo root・・PROJECT_ROOT = Path(__file__).resolve().parents[1]

# 繝ｫ繝ｼ繝育峩荳九・ .env 繧定ｪｭ縺ｿ霎ｼ繧・亥ｭ伜惠縺吶ｌ縺ｰ・・load_dotenv(dotenv_path=PROJECT_ROOT / ".env", override=False)


@dataclass(frozen=True)
class Settings:
    """繧｢繝励Μ蜈ｨ菴薙〒蜈ｱ譛峨☆繧玖ｨｭ螳壼､縲・
    - 蜆ｪ蜈磯・ｽ・ 迺ｰ蠅・､画焚(.env) > 譌｢螳壼､
    - create_dirs=True 縺ｧ荳ｻ隕√ョ繧｣繝ｬ繧ｯ繝医Μ繧定・蜍穂ｽ懈・
    """

    # 繝代せ
    PROJECT_ROOT: Path
    DATA_CACHE_DIR: Path
    RESULTS_DIR: Path
    LOGS_DIR: Path

    # API/繝阪ャ繝医Ρ繝ｼ繧ｯ
    API_EODHD_BASE: str
    EODHD_API_KEY: Optional[str]
    REQUEST_TIMEOUT: int
    DOWNLOAD_RETRIES: int
    API_THROTTLE_SECONDS: float

    # 螳溯｡後ヱ繝ｩ繝｡繝ｼ繧ｿ
    THREADS_DEFAULT: int
    MARKET_CAL_TZ: str


def _env_int(name: str, default: int) -> int:
    try:
        return int(os.getenv(name, default))
    except Exception:
        return default


def _env_float(name: str, default: float) -> float:
    try:
        return float(os.getenv(name, default))
    except Exception:
        return default


def get_settings(create_dirs: bool = False) -> Settings:
    """險ｭ螳壹ｒ逕滓・縺励※霑斐☆縲ょｿ・ｦ√↓蠢懊§縺ｦ蜃ｺ蜉帷ｳｻ繝・ぅ繝ｬ繧ｯ繝医Μ繧剃ｽ懈・縲・""
    root = PROJECT_ROOT

    data_cache = Path(os.getenv("DATA_CACHE_DIR", root / "data_cache"))
    results_dir = Path(os.getenv("RESULTS_DIR", root / "results_csv"))
    logs_dir = Path(os.getenv("LOGS_DIR", root / "logs"))

    settings = Settings(
        PROJECT_ROOT=root,
        DATA_CACHE_DIR=data_cache,
        RESULTS_DIR=results_dir,
        LOGS_DIR=logs_dir,
        API_EODHD_BASE=os.getenv("API_EODHD_BASE", "https://eodhistoricaldata.com"),
        EODHD_API_KEY=os.getenv("EODHD_API_KEY"),
        REQUEST_TIMEOUT=_env_int("REQUEST_TIMEOUT", 10),
        DOWNLOAD_RETRIES=_env_int("DOWNLOAD_RETRIES", 3),
        API_THROTTLE_SECONDS=_env_float("API_THROTTLE_SECONDS", 1.5),
        THREADS_DEFAULT=_env_int("THREADS_DEFAULT", 8),
        MARKET_CAL_TZ=os.getenv("MARKET_CAL_TZ", "America/New_York"),
    )

    if create_dirs:
        for p in (settings.DATA_CACHE_DIR, settings.RESULTS_DIR, settings.LOGS_DIR):
            try:
                Path(p).mkdir(parents=True, exist_ok=True)
            except Exception:
                # 螟ｱ謨励＠縺ｦ繧り・蜻ｽ逧・〒縺ｯ縺ｪ縺・◆繧∵升繧翫▽縺ｶ縺・                pass

    return settings


__all__ = ["Settings", "get_settings"]


