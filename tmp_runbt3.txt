            spy_df=spy_df,
            ui_manager=ui_manager,
            **kwargs,
        )
        if candidates_by_date is None:
            return None, None, None, None, None

        results_df = run_backtest_with_logging(
            strategy, prepared_dict, candidates_by_date, capital, system_name, ui_manager=ui_manager
        )
        show_results(results_df, capital, system_name)

        # セッションへ保存（リラン対策）
        st.session_state[key_results] = results_df
        st.session_state[key_prepared] = prepared_dict
        st.session_state[key_cands] = candidates_by_date
        st.session_state[key_capital_saved] = capital
        if merged_df is not None:
            st.session_state[key_merged] = merged_df

        if system_name == "System1":
            return results_df, merged_df, prepared_dict, capital, candidates_by_date
        else:
            return results_df, None, prepared_dict, capital, candidates_by_date

    return None, None, None, None, None


# ------------------------------
# Rendering helpers
# ------------------------------
def summarize_results(results_df: pd.DataFrame, capital: float):
    if results_df is None or results_df.empty:
        return {}, results_df
    df = results_df.copy()
    df["exit_date"] = pd.to_datetime(df["exit_date"])  # type: ignore[index]
    df = df.sort_values("exit_date")
    df["cumulative_pnl"] = df["pnl"].cumsum()
    df["cum_max"] = df["cumulative_pnl"].cummax()
    df["drawdown"] = df["cumulative_pnl"] - df["cum_max"]
    total_return = float(df["pnl"].sum())
    win_rate = float((df["return_%"] > 0).mean() * 100) if "return_%" in df.columns else 0.0
    max_dd = float(df["drawdown"].min())
    summary = {
        "trades": int(len(df)),
        "total_return": total_return,
        "win_rate": win_rate,
        "max_dd": max_dd,
    }
    return pd.Series(summary), df


def show_results(results_df: pd.DataFrame, capital: float, system_name: str = "SystemX"):
    if results_df is None or results_df.empty:
        st.info("no trades")
        return
    st.success("backtest finished")

    st.subheader("results")
    st.dataframe(results_df)

    summary, df2 = summarize_results(results_df, capital)
    # Series/Dict いずれにも安全に対応し、欠損キーは 0 扱い
    if isinstance(summary, pd.Series):
        summary = summary.to_dict()
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("trades", int(summary.get("trades", 0)))
    col2.metric("total pnl", f"{float(summary.get('total_return', 0.0)):.2f}")
    col3.metric("win rate (%)", f"{float(summary.get('win_rate', 0.0)):.2f}")
    col4.metric("max drawdown", f"{float(summary.get('max_dd', 0.0)):.2f}")

    st.subheader("cumulative pnl")
    plt.figure(figsize=(10, 4))
    plt.plot(df2["exit_date"], df2["cumulative_pnl"], label="CumPnL")
    plt.xlabel("date")
    plt.ylabel("pnl")
    plt.title("cumulative pnl")
    plt.legend()
    st.pyplot(plt)

    st.subheader("yearly summary")
    st.dataframe(df2.groupby(df2["exit_date"].dt.to_period("Y"))["pnl"].sum().reset_index())
    st.subheader("monthly summary")
    st.dataframe(df2.groupby(df2["exit_date"].dt.to_period("M"))["pnl"].sum().reset_index())

    st.subheader("holdings heatmap (by day)")
    progress_heatmap = st.progress(0)
    heatmap_log = st.empty()
    start_time = time.time()
    unique_dates = sorted(df2["entry_date"].dt.normalize().unique())
    total_dates = len(unique_dates)
    for i, _date in enumerate(unique_dates, 1):
        _ = df2[(df2["entry_date"] <= _date) & (df2["exit_date"] >= _date)]
        log_with_progress(
            i,
            total_dates,
            start_time,
            prefix="heatmap",
            batch=10,
            log_area=heatmap_log,
            progress_bar=progress_heatmap,
            unit="days",
        )
        time.sleep(0.005)
    heatmap_log.text("drawing heatmap...")
    holding_matrix = generate_holding_matrix(df2)
    display_holding_heatmap(holding_matrix, title=f"{system_name} - holdings heatmap")
    # unique-key download button to avoid DuplicateElementId across tabs/systems
    csv_bytes = holding_matrix.to_csv().encode("utf-8")
    st.download_button(
        label="download holdings csv",
        data=csv_bytes,
        file_name=f"holding_status_{system_name}.csv",
        mime="text/csv",
        key=f"{system_name}_download_holding_csv",
    )
    try:
        progress_heatmap.empty()
    except Exception:
        pass


def show_signal_trade_summary(source_df, trades_df, system_name: str):
    if system_name == "System1" and isinstance(source_df, pd.DataFrame):
        signal_counts = source_df["symbol"].value_counts().reset_index()
        signal_counts.columns = ["symbol", "Signal_Count"]
    else:
        signal_counts = {
            sym: int(df.get("setup", pd.Series(dtype=int)).sum()) for sym, df in (source_df or {}).items()
        }
        signal_counts = pd.DataFrame(signal_counts.items(), columns=["symbol", "Signal_Count"])

    if trades_df is not None and not trades_df.empty:
        trade_counts = trades_df.groupby("symbol").size().reset_index(name="Trade_Count")
    else:
        trade_counts = pd.DataFrame(columns=["symbol", "Trade_Count"])

    summary_df = pd.merge(signal_counts, trade_counts, on="symbol", how="outer").fillna(0)
    summary_df["Signal_Count"] = summary_df["Signal_Count"].astype(int)
    summary_df["Trade_Count"] = summary_df["Trade_Count"].astype(int)

    with st.expander(f"{system_name} signals vs trades", expanded=False):
        st.dataframe(summary_df.sort_values("Signal_Count", ascending=False))
    return summary_df


def display_roc200_ranking(ranking_df: pd.DataFrame, years: int = 5, top_n: int = 10, title: str = "System1 ROC200 ranking"):
    if ranking_df is None or ranking_df.empty:
        st.info("no ranking data")
        return
    df = ranking_df.copy()
    df["Date"] = pd.to_datetime(df["Date"]) if "Date" in df.columns else pd.to_datetime(df.index)
    df = df.reset_index(drop=True)
    if "ROC200_Rank" not in df.columns and "ROC200" in df.columns:
        df["ROC200_Rank"] = df.groupby("Date")["ROC200"].rank(ascending=False, method="first")
    if years:
        start_date = pd.Timestamp.now() - pd.DateOffset(years=years)
        df = df[df["Date"] >= start_date]
    if top_n:
        df = df.groupby("Date").head(top_n)
    df = df.sort_values(["Date", "ROC200_Rank"], ascending=[True, True])
    with st.expander(f"{title} (last {years}y / top{top_n})", expanded=False):
        st.dataframe(
            df.reset_index(drop=True)[["Date", "ROC200_Rank", "symbol"]],
            hide_index=False,
        )


# ------------------------------
# Save helpers
# ------------------------------
def save_signal_and_trade_logs(signal_counts_df, results, system_name, capital):
    today_str = pd.Timestamp.today().strftime("%Y-%m-%d_%H%M")
    save_dir = "results_csv"
    os.makedirs(save_dir, exist_ok=True)
    sig_dir = os.path.join(save_dir, "signals"); os.makedirs(sig_dir, exist_ok=True)
    trade_dir = os.path.join(save_dir, "trades"); os.makedirs(trade_dir, exist_ok=True)

    if signal_counts_df is not None and not signal_counts_df.empty:
        signal_path = os.path.join(sig_dir, f"{system_name}_signals_{today_str}_{int(capital)}.csv")
        signal_counts_df.to_csv(signal_path, index=False)
        st.write(f"saved signals: {signal_path}")
        # 即時ダウンロード
        st.download_button(
            label=f"download {system_name} signals CSV",
            data=signal_counts_df.to_csv(index=False).encode("utf-8"),
            file_name=f"{system_name}_signals_{today_str}_{int(capital)}.csv",
            mime="text/csv",
            key=f"{system_name}_download_signals_csv",
        )

    trades_df = pd.DataFrame(results) if isinstance(results, list) else results
    if trades_df is not None and not trades_df.empty:
        trade_path = os.path.join(trade_dir, f"{system_name}_trades_{today_str}_{int(capital)}.csv")
        trades_df.to_csv(trade_path, index=False)
        st.write(f"saved trades: {trade_path}")
        # 即時ダウンロード
        st.download_button(
            label=f"download {system_name} trades CSV",
            data=trades_df.to_csv(index=False).encode("utf-8"),
